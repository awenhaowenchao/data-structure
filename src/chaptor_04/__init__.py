"""
二叉树
    特点：
        1. 每个节点最多只有两棵子树，即不存在节点度大于2的节点
        2. 子树有左右之分，不能颠倒
	五种形态：
        1. 空数
        2. 只含根节点
        3. 右子树为空
        4. 左子树为空
        5. 左右子树均不为空
    基本概念：
        1. 节点的度：节点所拥有的子节点的个数
        2. 叶子：度为零的节点
        3. 孩子：子树的根
        4. 双亲：孩子节点的上层节点
        5. 子孙：以某节点为根的子树中的任一个节点
        6. 祖先：从根节点到当前节点所经分支上的所有节点
        7. 节点层次：从根节点起
        8. 兄弟：同一个双亲的孩子
        9. 堂兄弟：其双亲在同一层的节点为堂兄弟
        10. 二叉树的度：最大的节点度，二叉树的度为2
        11. 二叉树的深度：节点的最大层次数

	两类特殊的二叉树：
        1. 满二叉树
        2. 完全二叉树，满二叉树肯定是完全二叉树，但完全二叉树不一定是满二叉树
	二叉树的存储结构
        1. 顺序存储    完全二叉树可以按照顺序存储，以节点书号对应顺序表的索引，非完全二叉树可以通过站位补全的方式成为完全二叉树（右偏斜二叉树不建议使用顺序存储）
        2. 链式存储
            1. 二叉链表    **
            2. 三叉链表    相对二叉链表，节点增加了双亲指针
	二叉树的遍历：
        1. 前序遍历 D(根)L(左)R(右)
        2. 中序遍历 L(左)D(根)R(右)
        3. 后序遍历 L(左)R(右)D(根)

    二叉树的层次遍历：**

    二叉树的复原：给定一个二叉树的前序和中序遍历结果，复原二叉树结构

    二叉树的变形：
        平衡二叉树(AVL)：任何节点的两个子树的高度最大差别为1

        构造平衡二叉树的方法：
            在插入的过程中，采用平衡旋转技术

        哈夫曼树：**
            最优树：
                节点的路径长度
                树的路径长度
                树的带权路径长度
            称由n个带权叶子结点构成的所有二叉树中带权路径长度最短的树为"最优树"，也称为哈夫曼树

        堆：
            堆是满足一下性质的数列{r1,r2,r3,..rn}
            小顶堆：
                ri<=r2i
                ri<=r2i+1
            大顶堆：
                ri>=r2i
                ri>=r2i+1
            堆排序的核心思想，以小顶堆为例
                1，以初始数列构建堆（如何构建呢？）
                2，取根节点（因为根最小啊）作为第一个输出
                3，调整剩余的元素，使其成为一个新堆
                4，重复2,3，指导n个元素全部输出完毕，得到一个有序队列

    树vs森林
        森林：
            n棵互不相交的树共同构成森林

        树：由根节点与其n个子节点组成
        树和森林的存储结构：
            1. 树的双亲表示法
            2. 树的孩子表示法
            3. 树的双亲孩子表示法
            4. 树的孩子兄弟表示法



"""